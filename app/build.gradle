plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
    id 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'
    id 'kotlin-kapt'
    id "dagger.hilt.android.plugin"
    id "com.google.gms.google-services"
}

android {
    compileSdk 33

    namespace 'com.github.leuludyha.ibdb'

    defaultConfig {
        applicationId "com.github.leuludyha.ibdb"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
        buildConfigField("String", "OPENLIBRARY_BASE_URL", OPENLIBRARY_BASE_URL)
        buildConfigField("String", "OPENLIBRARY_COVERS_URL", OPENLIBRARY_COVERS_URL)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        testInstrumentationRunner = "com.github.leuludyha.ibdb.HiltTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_compiler_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    lint {
        checkDependencies true
    }
}

dependencies {

    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.0'
    implementation("androidx.lifecycle:lifecycle-runtime-compose:2.6.0")
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation 'androidx.navigation:navigation-testing:2.5.3'
    implementation 'androidx.compose.material:material:1.2.0'
    androidTestImplementation project(path: ':domain')

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    implementation "androidx.compose.material3:material3:$material_version"
    // It is not recommended to use this directly as the archive size is ~30MB apparently
    implementation "androidx.compose.material:material-icons-extended:$material_extended_icons_version"

    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.0'

    // Coil
    implementation("io.coil-kt:coil-compose:1.4.0")
    // System UI Controller - Accompanist
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.17.0"

    //ROOM DB
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-paging:$room_version"

    // Paging 3.0
    implementation "androidx.paging:paging-compose:$paging_version"

    //Firebase
    implementation platform("com.google.firebase:firebase-bom:$firebase_bom_version")
    implementation "com.google.firebase:firebase-auth-ktx"
    implementation "com.google.firebase:firebase-firestore-ktx"
    implementation 'com.google.firebase:firebase-appcheck-debug:16.1.2'

    //Play Services
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$play_services_version"
    implementation "com.google.android.gms:play-services-auth:$play_services_auth_version"

    // Submodules
    implementation project(path: ':data')
    implementation project(path: ':domain')

    //Barcode
    implementation 'com.google.mlkit:barcode-scanning:17.0.3'

    //Some magic fixing to avoid duplicate classes at build time
    //implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))

    //Camerax
    def camerax_version = "1.3.0-alpha04"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:1.3.0-alpha04"

    //Camera permission
    implementation "com.google.accompanist:accompanist-permissions:0.19.0"

    // Testing
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    //Google Play Services dependency for the Maps SDK for android
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.maps.android:maps-compose:2.11.0'


//========== ======== ==== ==
//        TESTING
//========== ======== ==== ==
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0-alpha01'
    androidTestImplementation("com.google.dagger:hilt-android-testing:2.44")
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:2.44")

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
        // data binding
        'android/databinding/**/*.class',
        '**/android/databinding/*Binding.class',
        '**/android/databinding/*',
        '**/androidx/databinding/*',
        '**/BR.*',
        // android
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        // kotlin
        '**/*MapperImpl*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/*Component*.*',
        '**/*BR*.*',
        '**/Manifest*.*',
        '**/*$Lambda$*.*',
        '**/*Companion*.*',
        '**/*Module*.*',
        '**/*Dagger*.*',
        '**/*Hilt*.*',
        '**/*MembersInjector*.*',
        '**/*_MembersInjector.class',
        '**/*_Factory*.*',
        '**/*_Provide*Factory*.*',
        '**/*Extensions*.*',
        // sealed and data classes
        '**/*$Result.*',
        '**/*$Result$*.*',
        // adapters generated by moshi
        '**/*JsonAdapter.*',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ]))
}

connectedCheck {
    finalizedBy jacocoTestReport
}

kapt {
    correctErrorTypes true
}
